// Generated by CoffeeScript 1.3.1
/*!
 * Copyright (c) 2012 Andrew Volkov <hello@vol4ok.net>
 * Copyright (c) 2011 JP Richardson
*/

var BUF_LENGTH, copyFile, copyFileSync, fs, mkdirp, mkdirpSync, _buff,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

fs = require('fs');

__extends(fs, require('fs.walker'));

mkdirp = function(path, options, callback) {
  var dirname, exists, mode, parent, _ref, _ref1;
  if (options == null) {
    options = {};
  }
  _ref = require('path'), dirname = _ref.dirname, exists = _ref.exists;
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  mode = (_ref1 = options.mode) != null ? _ref1 : 0x1ed;
  console.log('mkdirp', path);
  parent = dirname(path);
  return exists(parent, function(isExists) {
    var completion;
    completion = function(err) {
      console.log('competion', err);
      if (err != null) {
        return callback(err);
      }
      console.log('fs.mkdir', path);
      return fs.mkdir(path, mode, callback);
    };
    if (isExists) {
      return completion(null);
    } else {
      return mkdirp(parent, options, completion);
    }
  });
};

mkdirpSync = function(path, options) {
  var dirname, existsSync, mode, parent, _ref;
  if (options == null) {
    options = {};
  }
  _ref = require('path'), dirname = _ref.dirname, existsSync = _ref.existsSync;
  mode = options.mode || 0x1ed;
  parent = dirname(path);
  if (!existsSync(parent)) {
    mkdirpSync(parent, options);
  }
  if (!existsSync(path)) {
    return fs.mkdirSync(path, mode);
  }
};

BUF_LENGTH = 64 * 1024;

_buff = new Buffer(BUF_LENGTH);

copyFileSync = function(srcFile, destFile) {
  var bytesRead, fdr, fdw, pos;
  fdr = fs.openSync(srcFile, 'r');
  fdw = fs.openSync(destFile, 'w');
  bytesRead = 1;
  pos = 0;
  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
    fs.writeSync(fdw, _buff, 0, bytesRead);
    pos += bytesRead;
  }
  fs.closeSync(fdr);
  return fs.closeSync(fdw);
};

copyFile = function(srcFile, destFile, cb) {
  var fdr, fdw;
  fdr = fs.createReadStream(srcFile);
  fdw = fs.createWriteStream(destFile);
  fdr.on('end', function() {
    return cb(null);
  });
  return fdr.pipe(fdw);
};

module.exports = fs;

__extends(exports, {
  mkdirp: mkdirp,
  mkdirpSync: mkdirpSync,
  copyFileSync: copyFileSync,
  copyFile: copyFile
});
